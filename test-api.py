# interactive_test.py
import asyncio
import logging
from visualsimboat_api import VisualSimBoatAPI  # Certifique-se de que o arquivo anterior est√° salvo como visualsibmboat_api.py

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")


def print_menu():
    """Exibe o menu de op√ß√µes."""
    print("\n" + "="*50)
    print("       üö§ VISUALSIMBOAT - MENU INTERATIVO")
    print("="*50)
    print("1.  Conectar ao simulador")
    print("2.  Iniciar motor")
    print("3.  Parar motor")
    print("4.  Definir acelera√ß√£o (0-100%)")
    print("5.  Definir dire√ß√£o (-100 a 100)")
    print("6.  Selecionar marcha 1")
    print("7.  Selecionar marcha 2")
    print("8.  Selecionar marcha 3")
    print("9.  Acelerar (incremental)")
    print("10. Obter posi√ß√£o GPS")
    print("11. Capturar imagem da c√¢mera frontal")
    print("12. Capturar imagens de todas as c√¢meras")
    print("13. Parada de emerg√™ncia (acelera√ß√£o=0, dire√ß√£o=0)")
    print("14. Obter informa√ß√µes da API")
    print("0.  Sair")
    print("="*50)


async def main():
    async with VisualSimBoatAPI() as api:
        print("üöÄ Iniciando cliente VisualSimBoat...")

        while True:
            print_menu()
            try:
                choice = input("Escolha uma op√ß√£o [0-14]: ").strip()
                if choice == "0":
                    print("üëã Encerrando teste. At√© logo!")
                    break

                # Test connection first
                if choice not in ["1"] and choice != "14":  # Allow info without connect
                    gps = await api.get_gps()
                    if gps is None:
                        print("‚ö†Ô∏è  Voc√™ precisa estar conectado. Tente a op√ß√£o 1 primeiro.")
                        continue

                # Menu de op√ß√µes
                if choice == "1":
                    connected = await api.connect()
                    if connected:
                        info = await api.get_info()
                        if info:
                            version = info.get("version", "desconhecida")
                            print(f"‚úÖ Conectado! Simulador: VisualSimBoat v{version}")
                        else:
                            print("‚úÖ Conectado, mas n√£o foi poss√≠vel obter informa√ß√µes.")
                    else:
                        print("‚ùå Falha ao conectar. Verifique se o simulador est√° rodando.")

                elif choice == "2":
                    if await api.engine_start():
                        print("‚úÖ Motor ligado.")
                    else:
                        print("‚ùå Falha ao ligar o motor.")

                elif choice == "3":
                    if await api.engine_stop():
                        print("‚úÖ Motor desligado.")
                    else:
                        print("‚ùå Falha ao desligar o motor.")

                elif choice == "4":
                    try:
                        value = int(input("Digite a acelera√ß√£o (0-100): "))
                        if await api.set_throttle(value):
                            print(f"‚úÖ Acelera√ß√£o definida para {value}%.")
                        else:
                            print("‚ùå Falha ao definir acelera√ß√£o.")
                    except ValueError:
                        print("‚ùå Valor inv√°lido. Deve ser um n√∫mero entre 0 e 100.")

                elif choice == "5":
                    try:
                        value = int(input("Digite o √¢ngulo de dire√ß√£o (-100 a 100, negativo = esquerda): "))
                        if await api.set_steering(value):
                            print(f"‚úÖ Dire√ß√£o definida para {value}.")
                        else:
                            print("‚ùå Falha ao definir dire√ß√£o.")
                    except ValueError:
                        print("‚ùå Valor inv√°lido. Deve ser um n√∫mero entre -100 e 100.")

                elif choice == "6":
                    if await api.gear_1():
                        print("‚úÖ Marcha 1 engatada.")
                    else:
                        print("‚ùå Falha ao engatar marcha 1.")

                elif choice == "7":
                    if await api.gear_2():
                        print("‚úÖ Marcha 2 engatada.")
                    else:
                        print("‚ùå Falha ao engatar marcha 2.")

                elif choice == "8":
                    if await api.gear_3():
                        print("‚úÖ Marcha 3 engatada.")
                    else:
                        print("‚ùå Falha ao engatar marcha 3.")

                elif choice == "9":
                    if await api.accelerate():
                        print("‚úÖ Comando de acelera√ß√£o enviado.")
                    else:
                        print("‚ùå Falha ao acelerar.")

                elif choice == "10":
                    gps = await api.get_gps()
                    if gps:
                        print(f"üìç GPS Atual: Lat {gps['lat']:.6f}, Lon {gps['lon']:.6f}, Alt {gps['alt']:.2f}m")
                    else:
                        print("‚ùå N√£o foi poss√≠vel obter GPS.")

                elif choice == "11":
                    print("üì∏ Capturando imagem frontal...")
                    img_data = await api.get_camera_image("front")
                    if img_data:
                        filename = "test_front.jpg"
                        with open(filename, "wb") as f:
                            f.write(img_data)
                        print(f"‚úÖ Imagem frontal salva como '{filename}'.")
                    else:
                        print("‚ùå Falha ao capturar imagem frontal.")

                elif choice == "12":
                    print("üì∏ Capturando imagens de todas as c√¢meras...")
                    images = await api.get_all_camera()
                    if images:
                        for name, data in images.items():
                            filename = f"test_{name}"
                            with open(filename, "wb") as f:
                                f.write(data)
                            print(f"‚úÖ Salvo: {filename}")
                        print(f"‚úÖ {len(images)} imagens salvas em diret√≥rio atual.")
                    else:
                        print("‚ùå Nenhuma imagem foi capturada.")

                elif choice == "13":
                    if await api.emergency_stop():
                        print("üõë Parada de emerg√™ncia ativada: acelera√ß√£o=0, dire√ß√£o=0.")
                    else:
                        print("‚ö†Ô∏è  Erro ao tentar parada de emerg√™ncia.")

                elif choice == "14":
                    info = await api.get_info()
                    if info:
                        print("\nüîß Informa√ß√µes da API:")
                        for k, v in info.items():
                            print(f"   {k}: {v}")
                    else:
                        print("‚ùå N√£o foi poss√≠vel obter informa√ß√µes da API.")

                else:
                    print("‚ùå Op√ß√£o inv√°lida. Escolha um n√∫mero entre 0 e 14.")

            except KeyboardInterrupt:
                print("\n\nüëã Interrompido pelo usu√°rio. Encerrando...")
                break
            except Exception as e:
                print(f"‚ùå Erro inesperado: {e}")

    print("üîö Cliente encerrado.")


if __name__ == "__main__":
    asyncio.run(main())